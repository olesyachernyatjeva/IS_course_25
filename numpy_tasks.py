import numpy as np

def uniform_intervals(a, b, n):
    """1. —Å–æ–∑–¥–∞–µ—Ç numpy –º–∞—Å—Å–∏–≤ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç a –¥–æ b –Ω–∞ n –æ—Ç—Ä–µ–∑–∫–æ–≤."""
    
    return np.linspace(a, b, n)
def test1():
    assert np.allclose(uniform_intervals(-1.2, 2.4, 7), np.array([-1.2, -0.6,  0. ,  0.6,  1.2,  1.8,  2.4]))
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test1()
print("–¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω.")
    

def cyclic123_array(n): 
    """2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç numpy –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã  3ùëõ , –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ —á–∏—Å–ª–∞–º–∏ 1, 2, 3, 1, 2, 3, 1...."""
    array_1 = np.array([1, 2, 3])
    return np.tile(array_1, n)

def test2():
    assert np.allclose(cyclic123_array(4), np.array([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])) 
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test2()
print("–¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω.")


def first_n_odd_number(n):
    """3. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–µ—Ä–≤—ã—Ö n –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
    return 2 * np.arange(n) + 1
def test3():
    assert np.allclose(first_n_odd_number(3), np.array([1, 3, 5]))
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test3()
print("–¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω.")


def zeros_array_with_border(n):
    """4. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π —Ä–∞–∑–º–µ—Ä–∞ n x n —Å "—Ä–∞–º–∫–æ–π" –∏–∑ –µ–¥–∏–Ω–∏—Ü –ø–æ –∫—Ä–∞—è–º."""
    a = np.zeros((n, n))
    a[0, :] = 1
    a[-1, :] = 1
    a[:, 0] = 1
    a[:, -1] = 1
    return a
def test4():
    assert np.allclose(zeros_array_with_border(4), np.array([[1., 1., 1., 1.],
                                                             [1., 0., 0., 1.],
                                                             [1., 0., 0., 1.],
                                                             [1., 1., 1., 1.]]))
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test4()
print("–¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω.")


def chess_board(n):
    """5. –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ n x n —Å —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–æ–π –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü"""
    base = np.array([[0, 1], [1, 0]])
    num_tiles = (n + 1) // 2
    tiled = np.tile(base, (num_tiles, num_tiles))  
    return tiled[:n, :n]  
def test5():
    expected = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
    assert np.allclose(chess_board(3), expected)
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test5()
print("–¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω.")


def matrix_with_sum_index(n):
    """6. –°–æ–∑–¥–∞—ë—Ç ùëõ √ó ùëõ  –º–∞—Ç—Ä–∏—Ü—É —Å (ùëñ,ùëó)-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω—ã–º ùëñ+ùëó."""
    i, j = np.indices((n, n))
    return i + j
    i, j = np.indices((n, n))
    return i + j
def test6():
    assert np.allclose(matrix_with_sum_index(3), np.array([[0, 1, 2],
                                                           [1, 2, 3],
                                                           [2, 3, 4]]))
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test6()
print("–¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω.")


def cos_sin_as_two_rows(a, b, dx):
    """7. –í—ã—á–∏—Å–ª–∏—Ç–µ $cos(x)$ –∏ $sin(x)$ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [a, b) —Å —à–∞–≥–æ–º dx, 
    –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤. """
    x = np.arange(a, b, dx)
    cos_x = np.cos(x)
    sin_x = np.sin(x)
    return np.vstack((cos_x, sin_x))
def test7():
    assert np.allclose(cos_sin_as_two_rows(0, 1, 0.25), np.array([[1.        , 0.96891242, 0.87758256, 0.73168887],
                                                                  [0.        , 0.24740396, 0.47942554, 0.68163876]]))
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test7()
print("–¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω.")


def compute_mean_rowssum_columnssum(A):
    """8. –î–ª—è numpy –º–∞—Å—Å–∏–≤–∞ A –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—É–º–º—É —Å—Ç—Ä–æ–∫ –∏ —Å—É–º–º—É —Å—Ç–æ–ª–±—Ü–æ–≤."""
    mean = np.mean(A)
    rows_sum = np.sum(A, axis=1)
    columns_sum = np.sum(A, axis=0)
    return mean, rows_sum, columns_sum
def test8():
    np.random.seed(42)
    A = np.random.rand(3, 5)
    mean, rows_sum, columns_sum = compute_mean_rowssum_columnssum(A)

    assert np.abs(mean - 0.49456456164468965) < 1e-12
    assert np.allclose(rows_sum, np.sum(A, axis=1))
    assert np.allclose(columns_sum, np.sum(A, axis=0))
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test8()
print("–¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω.")


def sort_array_by_column(A, j):
    """ 9. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ numpy –º–∞—Å—Å–∏–≤–∞ A –ø–æ j-–º—É —Å—Ç–æ–ª–±—Ü—É –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è."""
    return A[A[:, j].argsort()]
def test9():
    np.random.seed(42)
    A = np.random.rand(5, 5)
    assert np.allclose(sort_array_by_column(A, 1), np.array([[0.15599452, 0.05808361, 0.86617615, 0.60111501, 0.70807258],
                                                             [0.61185289, 0.13949386, 0.29214465, 0.36636184, 0.45606998],
                                                             [0.18340451, 0.30424224, 0.52475643, 0.43194502, 0.29122914],
                                                             [0.37454012, 0.95071431, 0.73199394, 0.59865848, 0.15601864],
                                                             [0.02058449, 0.96990985, 0.83244264, 0.21233911, 0.18182497]]))
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test9()
print("–¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω.")


def compute_integral(a, b, f, dx, method):
    """10. –°—á–∏—Ç–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ f –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [a, b] —Å —à–∞–≥–æ–º dx 3-–º—è –º–µ—Ç–æ–¥–∞–º–∏:  
    method == 'rectangular' - –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞   
    method == 'trapezoidal' - –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–∏–π   
    method == 'simpson' - –º–µ—Ç–æ–¥–æ–º –°–∏–º–ø—Å–æ–Ω–∞  
    """
    x = np.arange(a, b, dx)
    if method == 'rectangular':
       return np.sum(f(x) * dx)
    elif method == 'trapezoidal':
       return (dx/2) * (f(a) + 2*np.sum(f(x[1:])) + f(b-dx))
    elif method == 'simpson':
        n = len(x)
        if n % 2 == 0:
            x = x[:-1] 
            n = len(x)
        h = (b - a) / (n - 1) # 
        return (h/3) * (f(a) + 4*np.sum(f(x[1::2])) + 2*np.sum(f(x[2:-1:2])) + f(b-dx))

def test10():
    f1 = lambda x: (x**2 + 3) / (x - 2)
    assert np.allclose(compute_integral(3, 4, f1, 0.001, method="rectangular"), 10.352030263919616, rtol=0.01)
    assert np.allclose(compute_integral(3, 4, f1, 0.001, method="trapezoidal"), 10.352030263919616, rtol=0.01)
    assert np.allclose(compute_integral(3, 4, f1, 0.001, method="simpson"), 10.352030263919616, rtol=0.001)

    f2 = lambda x: np.cos(x)**3
    assert np.allclose(compute_integral(0, np.pi/2, f2, 0.001, method="rectangular"), 2/3, rtol=0.01)
    assert np.allclose(compute_integral(0, np.pi/2, f2, 0.001, method="trapezoidal"), 2/3, rtol=0.01)
    assert np.allclose(compute_integral(0, np.pi/2, f2, 0.001, method="simpson"), 2/3, rtol=0.001)

#–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
test10()
print("–¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω.") 
    







